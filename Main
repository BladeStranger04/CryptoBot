import telebot
import requests
import pandas as pd
from datetime import datetime, timedelta
import matplotlib.pyplot as plt
import matplotlib
import io
import time

# –¢–æ–∫–µ–Ω –±–æ—Ç–∞
API_TOKEN = 'token'

bot = telebot.TeleBot(API_TOKEN)
matplotlib.use('agg')

# –§–ª–∞–≥ –°–∫—Ä–∏–Ω–Ω–µ—Ä–∞
screener = False

# –°–ø–∏—Å–æ–∫ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç, –∫–æ—Ç–æ—Ä—ã–µ –±—É–¥—É—Ç –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è –≤ –±–æ—Ç–µ
crypto_list = [
    {'name': 'Bitcoin', 'ticker': 'BTCUSDT'},
    {'name': 'Ethereum', 'ticker': 'ETHUSDT'},
    {'name': 'Binance Coin', 'ticker': 'BNBUSDT'},
    {'name': 'Cardano', 'ticker': 'ADAUSDT'},
    {'name': 'Dogecoin', 'ticker': 'DOGEUSDT'},
    {'name': 'Polkadot', 'ticker': 'DOTUSDT'},
    {'name': 'Chainlink', 'ticker': 'LINKUSDT'},
    {'name': 'Litecoin', 'ticker': 'LTCUSDT'},
    {'name': 'Ripple', 'ticker': 'XRPUSDT'},
]

# –°–ª–æ–≤–∞—Ä—å –¥–∞–Ω–Ω—ã—Ö –æ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–µ, –∫–æ—Ç–æ—Ä—ã–µ –±—É–¥—É—Ç –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è –≤ –±–æ—Ç–µ
crypto_data = {}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç
def monitor_crypto(message):
    global screener

    # –ï—Å–ª–∏ —Ñ–ª–∞–≥ Screener = True, —Ç–æ –Ω–∞—á–∏–Ω–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥
    if screener:
        for crypto in crypto_list:
            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –∫—É—Ä—Å –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã –∏–∑ —Å–ª–æ–≤–∞—Ä—è crypto_data
            current_rate = crypto_data[crypto['ticker']]['close'].iloc[-1]
            # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–µ
            update_crypto_data(crypto['ticker'])
            # –ü–æ–ª—É—á–∞–µ–º –Ω–æ–≤—ã–π –∫—É—Ä—Å –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã
            new_rate = crypto_data[crypto['ticker']]['close'].iloc[-1]
            # –ï—Å–ª–∏ –∫—É—Ä—Å –∏–∑–º–µ–Ω–∏–ª—Å—è, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            if new_rate != current_rate:
                change = round(((new_rate - current_rate) / current_rate) * 100, 2)
                if change >= 0:
                    change = "+" + str(change)
                text = f"{crypto['name']}: {new_rate} ({change}% change)"
                bot.send_message(chat_id=message.chat.id, text=text)
    # –ï—Å–ª–∏ —Ñ–ª–∞–≥ Screener = False, —Ç–æ –Ω–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞–µ–º
    else:
        pass

# –î–æ–±–∞–≤–ª—è–µ–º —Ç–∞–π–º–µ—Ä –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É
def monitor_schedule(message):
    while True:
        monitor_crypto(message)
        time.sleep(60)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–µ
def get_crypto_data(ticker, interval='1d', limit='6'):
    url = f'https://api.binance.com/api/v3/klines?symbol={ticker}&interval={interval}&limit={limit}'
    response = requests.get(url)
    raw_data = response.json()
    df = pd.DataFrame(raw_data, columns=['open_time', 'open', 'high', 'low', 'close', 'volume', 'close_time',
                                         'quote_asset_volume', 'number_of_trades', 'last_price',
                                         'taker_buy_quote_asset_volume', 'unknown'])
    df['open_time'] = pd.to_datetime(df['open_time'], unit='ms')
    df['close_time'] = pd.to_datetime(df['close_time'], unit='ms')
    df['open'] = pd.to_numeric(df['open'])
    df['close'] = pd.to_numeric(df['close'])
    return df


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–µ
def update_crypto_data(ticker):
    crypto_data[ticker] = get_crypto_data(ticker)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–Ω–æ–ø–æ–∫ —Å –∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ–º –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç
def create_crypto_buttons():
    markup = telebot.types.ReplyKeyboardMarkup(row_width=3)
    buttons = []
    for crypto in crypto_list:
        buttons.append(telebot.types.KeyboardButton(crypto['name']))
    buttons.append(telebot.types.KeyboardButton('Choose Mode'))
    markup.add(*buttons)
    return markup

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–Ω–æ–ø–æ–∫ –≤—ã–±–æ—Ä–∞ —Ä–µ–∂–∏–º–∞
def create_mode_buttons():
    markup = telebot.types.ReplyKeyboardMarkup(row_width=2)
    buttons = [telebot.types.KeyboardButton("CurrencyTracker"), telebot.types.KeyboardButton("Screener")]
    markup.add(*buttons)
    return markup

# –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –±–æ—Ç–∞
@bot.message_handler(commands=['start'])
def send_hello(message):
    response = "Hello, I am a bot that can output cryptocurrency rates and track market changes." \
               "\nAll information is taken from Binance website."
    bot.send_message(message.chat.id, response, reply_markup=create_mode_buttons())

# –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –æ—Ç–ª–æ–≤–∞ –≤—Å–µ—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
@bot.message_handler(func=lambda message: True)
def handle_message(message):
    global screener

    # –†–µ–∂–∏–º –¥–ª—è –≤—ã–≤–æ–¥–∞ –∫—É—Ä—Å–∞ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç
    if message.text == "CurrencyTracker":
        screener = False
        bot.send_message(message.chat.id, "Mode: CurrencyTracker", reply_markup=create_crypto_buttons())
    # –†–µ–∂–∏–º –¥–ª—è —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è —Ä—ã–Ω–∫–∞
    elif message.text == "Screener":
        screener = True
        monitor_schedule(message)
        bot.send_message(message.chat.id, "Mode: Screener")
    # –í—ã–±–æ—Ä —Ä–µ–∂–∏–º–∞ –±–æ—Ç–∞
    elif message.text == "Choose Mode":
        screener = False
        bot.send_message(message.chat.id, "Let's switch mode!", reply_markup=create_mode_buttons())
    # –í—ã–≤–æ–¥–∏–º –∫—É—Ä—Å –∫—Ä–∏–ø—Ç—ã
    else:
        for crypto in crypto_list:
            if message.text == crypto['name']:
                update_crypto_data(crypto['ticker'])
                current_crypto_data = crypto_data[crypto['ticker']]
                # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 6 –¥–Ω–µ–π
                last_6_days_data = current_crypto_data[current_crypto_data['open_time'] > datetime.now() - timedelta(days=7)]
                # –†–∏—Å—É–µ–º –≥—Ä–∞—Ñ–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è –∫—É—Ä—Å–∞
                plt.plot(last_6_days_data['open_time'], last_6_days_data['open'])
                plt.title(f'{crypto["name"]} rate for the last 6 days')
                plt.xlabel('Date')
                plt.ylabel('Rate, USD')
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≥—Ä–∞—Ñ–∏–∫ –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞
                buffer = io.BytesIO()
                plt.savefig(buffer, format='png')
                buffer.seek(0)
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏ —Ç–µ–∫—É—â–∏–π –∫—É—Ä—Å
                bot.send_photo(message.chat.id, photo=buffer.getvalue())
                dollar = 'üíµ'
                bot.send_message(message.chat.id, f'{crypto["name"]} - {current_crypto_data.iloc[-1]["close"]:.2f} USD ' + dollar * 3)
                # –û—á–∏—â–∞–µ–º –≥—Ä–∞—Ñ–∏–∫ –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ –≤—ã–≤–æ–¥–∞
                plt.clf()
                # –í—ã—Ö–æ–¥–∏–º –∏–∑ —Ü–∏–∫–ª–∞ –ø–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è
                break

if name == 'main':
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–µ
    for crypto in crypto_list:
        update_crypto_data(crypto['ticker'])

    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    bot.polling()
